#!/bin/bash
echo Marking files as executable...
chmod +x commit
chmod +x push
chmod +x init-repo
chmod +x commit-and-push
chmod +x pull
chmod +x set-cache-credentials
chmod +x set-store-credentials
chmod +x global-set-cache-credentials
chmod +x global-set-store-credentials
chmod +x lib/*
if [ ! -f ".systeminitializedrepobefore" ] && [ ! "$*" == "--norepoconfig" ] || [ "$*" == "--newrepoconfig" ]; then
    echo Initializing repo...
    ./init-repo
    echo
    echo Do you want to set a remote repository destination?
    echo \(this must be manually configured if no was selected, see README for more info\)
    echo Make sure you have writing permissions for the repository.
    read -p "Do you want to continue [Y/n] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo Configuring remote repository destination...
        echo Enter the remote destination url:
        read giturl
        git remote add repo $giturl
    fi
    echo
    read -p "Do you want to store git credentials for this repository? (less safe than cache, which wipes on every reboot, select no for caching or nothing) [Y/n] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo
        ./set-store-credentials
    else
        echo
        read -p "Do you want to cache git credentials for this repository? (cache wipes after each restart) [Y/n] " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            ./set-cache-credentials
        fi
        echo
    fi
    echo >> .systeminitializedrepobefore
fi
echo Checking dependencies...
missingdepends=false

requiredvermono=5.18.0
requiredvermsbuild=15.6.0.0
requiredvernuget=5.6.0.6591
requiredvermake=4.3
requiredvergit=2.28.0

echo Searching for mono...
if command -v mono &> /dev/null 
then
    requiredver=$requiredvermono
    currentver="$(mono --version|grep --only-matching --perl-regexp "\\d+\.\\d+\.\\d+")"
    packagename=Mono
    installed=false
    
    if [ "$(printf '%s\n' "$requiredver" "$currentver" | sort -V | head -n1)" = "$requiredver" ]; then 
        echo $packagename is installed.
        installed=true
    else
        echo $packagename is installed but OUTDATED, minimal version: $requiredver, current version: $currentver
        installed=false
        missingdepends=true
    fi
    
    monoinstalled=$installed
else
    echo Mono is NOT installed.
    monoinstalled=false
    missingdepends=true
fi

echo Searching for MSBuild...
if command -v msbuild &> /dev/null 
then
    requiredver=$requiredvermsbuild
    currentver="$(msbuild -version|grep --only-matching --perl-regexp "\\d+\.\\d+\.\\d+\.\\d+")"
    packagename=MSBuild
    installed=false
    
    if [ "$(printf '%s\n' "$requiredver" "$currentver" | sort -V | head -n1)" = "$requiredver" ]; then 
        echo $packagename is installed.
        installed=true
    else
        echo $packagename is installed but OUTDATED, minimal version: $requiredver, current version: $currentver
        installed=false
        missingdepends=true
    fi
    
    msbuildinstalled=$installed
else
    echo MSBuild is NOT installed.
    msbuildinstalled=false
    missingdepends=true
fi

echo Searching for NuGet...
if command -v nuget &> /dev/null 
then
    requiredver=$requiredvernuget
    currentver="$(nuget|grep --only-matching --perl-regexp "\\d+\.\\d+\.\\d+\.\\d+")"
    packagename=NuGet
    installed=false
    
    if [ "$(printf '%s\n' "$requiredver" "$currentver" | sort -V | head -n1)" = "$requiredver" ]; then 
        echo $packagename is installed.
        installed=true
    else
        echo $packagename is installed but OUTDATED, minimal version: $requiredver, current version: $currentver
        installed=false
        missingdepends=true
    fi
    
    nugetinstalled=$installed
else
    echo NuGet is NOT installed.
    nugetinstalled=false
    missingdepends=true
fi

echo Searching for make...
if command -v make &> /dev/null 
then
    requiredver=$requiredvermake
    currentver="$(make --version|grep --only-matching --perl-regexp "\\d+\.\\d+")"
    packagename=make
    installed=false
    
    if [ "$(printf '%s\n' "$requiredver" "$currentver" | sort -V | head -n1)" = "$requiredver" ]; then 
        echo $packagename is installed.
        installed=true
    else
        echo $packagename is installed but OUTDATED, minimal version: $requiredver, current version: $currentver
        installed=false
        missingdepends=true
    fi
    
    makeinstalled=$installed
else
    echo make is NOT installed.
    makeinstalled=false
    missingdepends=true
fi

echo Searching for Git...
if command -v git &> /dev/null 
then
    requiredver=$requiredvergit
    currentver="$(git --version|grep --only-matching --perl-regexp "\\d+\.\\d+\.\\d+")"
    packagename=Git
    installed=false
    
    if [ "$(printf '%s\n' "$requiredver" "$currentver" | sort -V | head -n1)" = "$requiredver" ]; then 
        echo $packagename is installed.
        installed=true
    else
        echo $packagename is installed but OUTDATED, minimal version: $requiredver, current version: $currentver
        installed=false
        missingdepends=true
    fi
    
    gitinstalled=$installed
else
    echo Git is NOT installed.
    makeinstalled=false
    missingdepends=true
fi

if [ $missingdepends == "false" ]; then
    echo
    echo Trying to restore packages...
    nuget restore -Verbosity quiet
    echo
    echo If package restore succeeded, run make to compile.
else
    echo
    echo You are missing the following dependencies:
    if [ "$monoinstalled" == "false" ]; then 
        echo Mono version $requiredvermono or above.
    fi
    if [ "$msbuildinstalled" == "false" ]; then 
        echo MSBuild version $requiredvermsbuild or above.
    fi
    if [ "$nugetinstalled" == "false" ]; then 
        echo NuGet version $requiredvernuget or above.
    fi
    if [ "$makeinstalled" == "false" ]; then 
        echo Make version $requiredvermake or above.
    fi
    if [ "$gitinstalled" == "false" ]; then 
        echo Git version $requiredvergit or above.
    fi
fi
